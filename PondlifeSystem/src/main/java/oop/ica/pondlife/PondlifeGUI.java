/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.ica.pondlife;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import static java.nio.file.StandardOpenOption.CREATE;
import static java.nio.file.StandardOpenOption.WRITE;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;


/**
 *
 * @author U0018369
 */
public class PondlifeGUI extends javax.swing.JFrame {

    /**
     * Creates new form TSGui
     */
    public PondlifeGUI() {
        initComponents();
        
        //load data
        loadProducts();
        
        //set list model for Jlist
        populateList();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        skuNumberTextfield = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        productTextfield = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        costTextfield = new javax.swing.JTextField();
        minTempTextfield = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        maxLengthTextfield = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        stockTextfield = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        maxTempTextfield = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pondlife Stock Control System");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Bauhaus 93", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 255, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pondlife");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setOpaque(true);

        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        productList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        productList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                productListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(productList);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Select Product");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("SKU Number");

        skuNumberTextfield.setBackground(new java.awt.Color(51, 51, 51));
        skuNumberTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        skuNumberTextfield.setForeground(new java.awt.Color(0, 255, 0));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Product");

        productTextfield.setBackground(new java.awt.Color(51, 51, 51));
        productTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        productTextfield.setForeground(new java.awt.Color(0, 255, 0));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Cost(Â£)");

        costTextfield.setBackground(new java.awt.Color(51, 51, 51));
        costTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        costTextfield.setForeground(new java.awt.Color(0, 255, 0));

        minTempTextfield.setBackground(new java.awt.Color(51, 51, 51));
        minTempTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        minTempTextfield.setForeground(new java.awt.Color(0, 255, 0));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Max Length");

        maxLengthTextfield.setBackground(new java.awt.Color(51, 51, 51));
        maxLengthTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        maxLengthTextfield.setForeground(new java.awt.Color(0, 255, 0));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Notes");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("MinTemp");

        stockTextfield.setBackground(new java.awt.Color(51, 51, 51));
        stockTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        stockTextfield.setForeground(new java.awt.Color(0, 255, 0));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Stock");

        notesTextArea.setBackground(new java.awt.Color(0, 0, 0));
        notesTextArea.setColumns(20);
        notesTextArea.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        notesTextArea.setForeground(new java.awt.Color(0, 255, 0));
        notesTextArea.setLineWrap(true);
        notesTextArea.setRows(5);
        jScrollPane2.setViewportView(notesTextArea);

        console.setEditable(false);
        console.setColumns(20);
        console.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        console.setLineWrap(true);
        console.setRows(4);
        jScrollPane3.setViewportView(console);

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Max Temp");

        maxTempTextfield.setBackground(new java.awt.Color(51, 51, 51));
        maxTempTextfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        maxTempTextfield.setForeground(new java.awt.Color(0, 255, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(skuNumberTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(productTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(stockTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(costTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(maxLengthTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(minTempTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(maxTempTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addGap(58, 58, 58))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(skuNumberTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(costTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(productTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stockTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxLengthTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(minTempTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(maxTempTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton)
                    .addComponent(addButton)
                    .addComponent(buyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    ///////////////// EVENT METHODS ////////////////////////
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        //display header to console
        console.setText("BUY PRODUCT\n\n");

        //check if item selected
        if (productList.getSelectedIndex()>=0){
            //call buy()
            buyProduct();
        } else {
            //update console
            console.append("Please select an Product.");
            productList.requestFocus();
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //display header to console
        console.setText("ADD STOCK\n\n");

        //check if item selected
        if (productList.getSelectedIndex()>=0){
            //call buy()
            addStock();
        } else {
            //update console
            console.append("Please select a Product.");
            productList.requestFocus();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        //display header to console and call quit method
        console.setText("QUIT APPLICATION\n\n");
        quit();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //display header to console and call quit method
        console.setText("QUIT APPLICATION\n\n");
        quit();
    }//GEN-LAST:event_formWindowClosing

    private void productListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_productListValueChanged
        //display details of product to textfields
        //get element index
        int index = productList.getSelectedIndex();
        
        //get product
        PondlifeProduct product = productsList.get(index);
        
        //get and show values
        skuNumberTextfield.setText( String.format( "%d", product.getSkuNumber()) );
        productTextfield.setText(product.getProduct());
        notesTextArea.setText( product.getNotes() );
        costTextfield.setText( String.format("%.2f", product.getCost()) );
        stockTextfield.setText( String.format( "%d", product.getStock()) );
        maxLengthTextfield.setText( String.format("%.2f", product.getMaxLength()) );
        minTempTextfield.setText( String.format( "%d", product.getMinTemp()) );        
        maxTempTextfield.setText( String.format( "%d", product.getMaxTemp()) );         
        
    }//GEN-LAST:event_productListValueChanged

    ///////////////////////// User Defined Methods ////////////////////
    
    private void loadProducts() {
        //instantiate local object
        File inputFile = new File(INPUT_FILE);
        Scanner fileScanner;

        //check if referenced file exists and is a file
        if ( inputFile.exists() && inputFile.isFile() ){
            try {
                //link file to file scanner to the file object
                fileScanner = new Scanner(inputFile);
                
                //loop through input file
                while( fileScanner.hasNextLine() ){
                    //read line
                    String line = fileScanner.nextLine();

                    //check that line is not just whitespace
                    if (line.trim().length() > 0){
                        
                        //not blank so parse tokens
                        int skuNumber = Integer.parseInt(line.split(DELIMITER)[0]);
                        String productItem = line.split(DELIMITER)[1];
                        String notes = line.split(DELIMITER)[2];
                        double maxLength = Double.parseDouble(line.split(DELIMITER)[3]);
                        int minTemp = Integer.parseInt(line.split(DELIMITER)[4]);
                        int maxTemp = Integer.parseInt(line.split(DELIMITER)[5]);
                        double price = Double.parseDouble(line.split(DELIMITER)[6]);
                        int stock = Integer.parseInt(line.split(DELIMITER)[7]);
                        
                        //add new object to arraylist
                        productsList.add(
                                new PondlifeProduct(skuNumber, productItem, notes, maxLength, minTemp, maxTemp,price, stock)
                        );
                    }
                }
                //close the file
                fileScanner.close();
                
                //Otherwise warn user file is invalid
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PondlifeGUI.class.getName()).log(Level.SEVERE, null, ex);
                console.setText("Input file error");
            } 
        } else {
            console.setText("\n\n!!!!! Error: '" + INPUT_FILE + "' does not exist !!!!!\n\n");
        }
    }
    
    //method to populate JlIst with make and model from products List
    private void populateList() {
        //loop through array list
        for (PondlifeProduct product: productsList){
            //add as element in list
            productsListModel.addElement(product.getProduct());
        }
        productList.setModel(productsListModel);
    }
    
    public void buyProduct(){
        //get element index
        int index = productList.getSelectedIndex();
        
        //get product
        PondlifeProduct selectedProduct = productsList.get(index);
        
        //get key details
        String product = selectedProduct.getProduct();
        String cost = String.format("Â£ %.2f", selectedProduct.getCost() );
        int stock = selectedProduct.getStock();
        
        //check  if stock is above zero
        if (stock > 0){
            //decrement stock in arry list and get new value
            productsList.get(index).decreaseStock();
            stock = selectedProduct.getStock();
            
            //update textfield
            stockTextfield.setText( String.format( "%d", stock ) );
            
            //update console
            String receipt = "CONFIRMATION OF SALE\n"
                    + "\tProduct: " + product
                    + "\n\tCost: " + cost;
            console.append(receipt);
        } else {
            //warn user no stock
            console.append("No stock for selected product.");
        }
    }
    
    public void addStock(){
        //get element index
        int index = productList.getSelectedIndex();
        
        //increment stock in array list
        productsList.get(index).increaseStock();
        
        //get product
        PondlifeProduct selectedProduct = productsList.get(index);
        
        //get key details
        String product = selectedProduct.getProduct();
        int stock = selectedProduct.getStock();

        //update textfield
        stockTextfield.setText( String.format( "%d", stock ) );
            
        //update console
        String note = "CONFIRMATION OF ADDING STOCK\n"
                    + "\tProduct: " + product
                    + "\n\tStock: " + stock;
        console.append(note);
    }
    
    public void quit(){
        //attempt to save
        saveData();	

        //end message
        System.out.println("\n\n***** Application closed by user *****\n");
        
        //quit
        System.exit(0);
    }
    
    //method to save data back to output file
    private void saveData() {
	try {
            //create string variable
            String outputString="";
            
            //create path object
            Path path = Paths.get(OUTPUT_FILE);
            
            //delete file if it already exists
            Files.deleteIfExists(path);

            
            //create output path
            try ( BufferedOutputStream out = new BufferedOutputStream( Files.newOutputStream(path, CREATE, WRITE) ) ) {
                
                //loop through arraylist
                for (PondlifeProduct product : productsList){
                    //get current item field values and save to output string
                    outputString = product.getSkuNumber() + DELIMITER;
                    outputString = outputString + product.getProduct() + DELIMITER;
                    outputString = outputString + product.getNotes() + DELIMITER;
                    outputString = outputString + product.getMaxLength() + DELIMITER;
                    outputString = outputString + product.getMaxTemp() + DELIMITER;
                    outputString = outputString + product.getMaxTemp() + DELIMITER;
                    outputString = outputString + product.getCost() + DELIMITER;
                    outputString = outputString + product.getStock();
                    
                    //transform outputString to byte array
                    byte data[] = outputString.getBytes();
                    
                    //write  byte array to the file
                    out.write(data, 0, data.length);
                    
                    //output newline
                    out.write("\r\n".getBytes());
                }
                
                //confirm data written
                console.setText( "Data written to fi le at:\n" + path.toAbsolutePath().toString() );
                
            } catch (IOException e) {
                //display any exception
                Logger.getLogger(PondlifeGUI.class.getName()).log(Level.SEVERE, null, e);
                console.setText("\n\n!!!!! File WriteError !!!!!\n" + e);
            }            
	} catch (IOException ex) {
            Logger.getLogger(PondlifeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    
    
    
    ////////////////////////main /////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PondlifeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PondlifeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PondlifeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PondlifeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PondlifeGUI().setVisible(true);
            }
        });
    }

    
    //class level variables
    private ArrayList<PondlifeProduct>productsList = new ArrayList<>();
    private final String INPUT_FILE="pondlife.txt";
    private final String OUTPUT_FILE="data.txt";
    private final String DELIMITER = ",";
    DefaultListModel productsListModel = new DefaultListModel();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton buyButton;
    private javax.swing.JTextArea console;
    private javax.swing.JTextField costTextfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField maxLengthTextfield;
    private javax.swing.JTextField maxTempTextfield;
    private javax.swing.JTextField minTempTextfield;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JList<String> productList;
    private javax.swing.JTextField productTextfield;
    private javax.swing.JButton quitButton;
    private javax.swing.JTextField skuNumberTextfield;
    private javax.swing.JTextField stockTextfield;
    // End of variables declaration//GEN-END:variables


}//end of class
